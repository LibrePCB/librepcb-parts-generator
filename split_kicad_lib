eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;

#/**********************************************************************/
#/*                                                                    */
#/*             -------                                                */
#/*            /   SOC  \                                              */
#/*           /    GEN   \                                             */
#/*          /    TOOL    \                                            */
#/*          ==============                                            */
#/*          |            |                                            */
#/*          |____________|                                            */
#/*                                                                    */
#/*  Converts a kicad symbol library file into a libre_PCB symbol      */
#/*                                                                    */
#/*                                                                    */
#/*  Author(s):                                                        */
#/*      - John Eaton, z3qmtr45@gmail.com                              */
#/*                                                                    */
#/**********************************************************************/
#/*                                                                    */
#/*    Copyright (C) <2020>  <Ouabache Design Works>                   */
#/*                                                                    */
#/*  This source file may be used and distributed without              */
#/*  restriction provided that this copyright statement is not         */
#/*  removed from the file and that any derivative work contains       */
#/*  the original copyright notice and the associated disclaimer.      */
#/*                                                                    */
#/*  This source file is free software; you can redistribute it        */
#/*  and/or modify it under the terms of the GNU Lesser General        */
#/*  Public License as published by the Free Software Foundation;      */
#/*  either version 2.1 of the License, or (at your option) any        */
#/*  later version.                                                    */
#/*                                                                    */
#/*  This source is distributed in the hope that it will be            */
#/*  useful, but WITHOUT ANY WARRANTY; without even the implied        */
#/*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR           */
#/*  PURPOSE.  See the GNU Lesser General Public License for more      */
#/*  details.                                                          */
#/*                                                                    */
#/*  You should have received a copy of the GNU Lesser General         */
#/*  Public License along with this source; if not, download it        */
#/*  from http://www.opencores.org/lgpl.shtml                          */
#/*                                                                    */
#/**********************************************************************/



############################################################################
# General PERL config
############################################################################
use Getopt::Long;
use English;
use File::Basename;
use Cwd;
$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.


############################################################################
### Process the options
############################################################################

Getopt::Long::config("require_order", "prefix=-");
GetOptions("h",
           "group=s" => \$group,
) || die "(use '$program_name -h' for help)";


##############################################################################
## Help option
##############################################################################
if ( ($opt_h eq "1") ) 
  { print "\n type split_kicad_lib -group group_name  filename.lib";
    print "\n";
    exit 1;
  }



#############################################################################
## 
## 
## 
#############################################################################

my $home           = cwd();
my $path           = "${home}/${group}";
mkdir $path,0755   unless( -e $path );


my $prog_name;

my $input_file         = $ARGV[0];

$_ =   $input_file;
  if(/(\S+)\/(\S+).lib/)
  {
  $prog_name = $2;
  #printf (" %s\n", $2);
  }

  $_ =   $prog_name;
    my @words = split /-/,$prog_name;
    my $line;

  open   FILE, $input_file;
  while(<FILE>){push @library_file, $_  ;}


my $print_on =0;
my $output_file;

foreach $line (@library_file)
    {
    $_ = $line; 

    if(/DEF (\S+) (\S+) (\S+) (\S+) (\S+) (\S+) (\S+) /)
      {
      my $name = $1;
      my $unit_count = $7;
      $print_on =1;
      $output_file  = "${path}/${name}.sym";
      open  LIBREPCB_SYM , ">  $output_file";


      printf ("../sym2cmp -group %s   %s  \n",$group,$output_file);
      printf ("python3.7 ../generate_sym.py --part 0 --group %s --variant default  --directory  ./%s/    --design  %s \n",$group, $group,$name);
      printf ("python3.7 ../generate_sym.py --part 0 --group %s --variant kicad    --directory  ./%s/    --design  %s \n",$group, $group,$name);
      while ($unit_count >0)
             {
             printf ("../sym2csv -group %s -Part %s   %s  \n",$group,$unit_count ,$output_file);
	     printf ("python3.7 ../generate_sym.py  --part %s --group %s --variant default  --directory  ./%s/    --design  %s \n",$unit_count ,$group, $group,$name);
	     printf ("python3.7 ../generate_sym.py  --part %s --group %s --variant kicad    --directory  ./%s/    --design  %s \n",$unit_count ,$group, $group,$name);
             $unit_count = $unit_count -1;
             }
      printf ("python3.7 ../generate_cmp.py --group %s --variant kicad    --directory  ./%s/    --design  %s \n",$group, $group,$name);


      }

    if(/ENDDEF/)
      {
      $print_on =0;
      close  LIBREPCB_SYM;
      }

   if($print_on)
     {
     printf LIBREPCB_SYM ("%s",$line);
     }

   }
    


























1


